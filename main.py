import streamlit as st
import pandas as pd
import numpy as np
import datetime
import gspread

cred = {
    "type": "service_account",
    "project_id": "focused-elysium-340604",
    "private_key_id": "b4d9ed4edcf1403742b7783bff2a3cbf2ea4e6f8",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDIcsuFOPcIGXUO\nGgvuI7jEY0c2DHIA29pjNSY9MWPo0NlfYwOnOImpRdpEV+5LsdGTbCThfG+TZxfW\nmxJyt+HSbjycl6SIDmbKzZN8bgwU4KyxrsBU2hfiB5PjYKgOwKaAt+/QuW3ZC2aG\n9DeMS906O0zO5k3acxMgKWPjv3PMFjyen4AFON+f256PE07aqJpLYmRU1g4kLAlX\nmLwpYEygik8EJfKwBevwtxJjVu8fiaJjAo8X6UMmLieH2EZ5K0tPsji7MhKZwvy9\ninbewE5MerrI2AsIyZr0UAfeaom04UAynHtRGt+5IKxGQilHqhzJjiVpfk4hNi7E\nWExCb90vAgMBAAECggEAUQYuBDTpjgmUSlX2+pTP6/phX5SaRISZ+z4RreyYARTi\nuO7yHBb7dkP5HWUZutku6NNu+QJuq3uhpCrcwyhXDNNohre5VxHTNSjx8/sbwRis\nVcpYjjP2MXR0sBVy+TugUimHs6wwnepA0E5JYdmMnCw6OOvZDnMziO2SJg5OhXDE\nfFBNp1jA5uYri5J1KkaYnLBns8BGi26GHdVpEa5J+MGb24h04nuU5HfafpMP+Vty\nhXp43tnpsdOf75QNkFg5JR3QNzYsd3J6OkQj6MtLCbiWVUMtcZWYLt/sT9kusAz2\nj96VTrRKZx6p5+JEmPuVqKaWRvTYpN0aJ3YXTilQ+QKBgQDlTjbwDS/obF3VXX4e\nR5fdr1RNQUU0MdPM8tuatwrkKakcgfLZq/9le5f1mwOWKSQokUvZFb0OjAKOqZ43\n5wp1tM/UP6mF59SjJeW1lyf4aSoX4EypVDZassxGw+z+nPryo55s14br0zp+OFkt\n2azC/7S68eEri8tCVscElkcmVQKBgQDfyJP9veT+vf1/HVPlGpdBh8zCkPO3pzWE\nzMNTdIYY0OkOvfTl+4bQ+7DA+T9PN6ubMENVSp0SXcxfrTQBj0ePxapvzGeg7Lwm\ngMkUOTatGjLSzYyGWi5Tc/ynkIvq7PUrXsJ6dqnUiRa15pi9eTeRbfb/PmJps4qw\nFSl3LTYRcwKBgQDMSBbXWtgwVsJtgAIIVb2syDLxNFHDwxQuhLkxpxoz1A2NkRNZ\n6kn4Ddh9/OCAGRzWa0LIHf60g/UPRXrn0JPX8wIn06Nh4PvlcLCpSwVX39CZPsDt\nJVHbEWi9LnTnC9Dg8vUDgCr50s9MfUStfTvU6NsIpM317m9hJU/d/UdblQKBgQCt\n46FDoYRIgn9xf+uJ8iColgqBAbuv8KlAmRAKUFhG/kaq4uZisxFuYLVXLhaIytx5\nCYa4xvLIq8Q8cE0iDSDxUgp/NxkrTeliDd6x7UdUOTBW58wTNg4bYNxppINkuF5G\nJir+mCidcy0HibkUOhX41rcAXYyBUDcrXjZLWgFSiwKBgQCT79Q4GIN0MqJEvQxs\nvUfMF96gsJ9cEGGjROtw/qlpaPJBhpmNSuHc6gKAxLDneIdt5nBxyo+lZOpzMIve\ntwnocYa/D8RCOYBX1S3pecI72ss82N+Ek/o2+PNt3nbZ+wxBhNlOIMiH3LxKOsLM\nuzNty1dOJ97/L0ED5IZ9sESCwg==\n-----END PRIVATE KEY-----\n",
    "client_email": "temp-606@focused-elysium-340604.iam.gserviceaccount.com",
    "client_id": "113559229310896807100",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/temp-606%40focused-elysium-340604.iam.gserviceaccount.com"
}

@st.cache
def long_running_function():
    sa = gspread.service_account_from_dict(cred)
    sh = sa.open("KT_DATA_ANKETA")
    st.session_state.sh = sa.open("KT_DATA_ANKETA")
    wks = sh.worksheet('map')

    st.session_state.df = pd.DataFrame(wks.get_all_records()).astype('str')

    # return pd.DataFrame(wks.get_all_records())
# df = pd.read_csv('map.csv')
df = pd.read_csv('map.csv')

hide_menu_style = """
        <style>
        #MainMenu {visibility: hidden;}
        </style>
        """
st.markdown(hide_menu_style, unsafe_allow_html=True)





q = {
    0: '–ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    1: '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    2: '–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
    3: '–†–î–¢',
    4: '–ù–∞–∑–≤–∞–Ω–∏–µ –û–±–ª–∞—Å—Ç–∏/–†–∞–π–æ–Ω/–ì–æ—Ä–æ–¥–∞',
    5: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞',
    6: '–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–≥–æ—Ä–æ–¥/ —Å–µ–ª–æ)',
    7: '–¢–∏–ø —É–ª–∏—Ü—ã (–ø—Ä–æ—Å–ø–µ–∫—Ç/ –±—É–ª—å–≤–∞—Ä/—É–ª–∏—Ü–∞/–ø–µ—Ä–µ—É–ª–æ–∫)',
    8: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã',
    9: '–ê–¥—Ä–µ—Å –ø–µ—Ä–≤–æ–≥–æ (–∑–¥–∞–Ω–∏—è/—Å–æ–æ—Ä—É–∂–µ–Ω–∏—è/–¥–æ–º–∞) —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ —É–ª–∏—Ü–µ',
    10: '–ù–æ–º–µ—Ä –¥–æ–º–∞ –∫ –∞–¥—Ä–µ—Å—É –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ —É–ª–∏—Ü–µ',
    11: '–ê–¥—Ä–µ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–∑–¥–∞–Ω–∏—è/—Å–æ–æ—Ä—É–∂–µ–Ω–∏—è/–¥–æ–º–∞) —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ —É–ª–∏—Ü–µ',
    12: '–ù–æ–º–µ—Ä –¥–æ–º–∞ –∫ –∞–¥—Ä–µ—Å—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞ —É–ª–∏—Ü–µ',
    13: '–ü—Ä–æ—Ç—è–∂–µ–Ω–Ω–æ—Å—Ç—å —É–ª–∏—Ü—ã (–≤ –º–µ—Ç—Ä–∞—Ö)',
    14: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —É–ª–∏—Ü—ã (–®–∏—Ä–æ—Ç–∞, –î–æ–ª–≥–æ—Ç–∞)',
    15: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ü–∞ —É–ª–∏—Ü—ã (–®–∏—Ä–æ—Ç–∞, –î–æ–ª–≥–æ—Ç–∞)',

    16: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É–ª–∏—Ü–∞–º–∏',
    17: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–ª—ã—Ö –¥–æ–º–æ–≤',
    18: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤',
    19: '–ù–æ–º–µ—Ä–∞ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤',
    20: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–Ω—ã—Ö –¥–æ–º–æ–≤',
    21: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∂–∏–ª—ã—Ö –¥–æ–º–æ–≤',
    22: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –Ω–∞ —á–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ',
    23: '–ù–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤ –Ω–∞ —á–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ',
    24: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –Ω–∞ –Ω–µ—á–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ',
    25: '–ù–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤ –Ω–∞ –Ω–µ—á–µ—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ',
    26: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∂–∏–ª—ã—Ö –∑–¥–∞–Ω–∏–π',
    27: '–ù–æ–º–µ—Ä–∞ –Ω–µ–∂–∏–ª—ã—Ö –∑–¥–∞–Ω–∏–π',
    28: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫,–º–∞—Ä—à—Ä—É—Ç–æ–≤ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ',
    29: '–ù–æ–º–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞',
    30: '–£—Ä–æ–≤–µ–Ω—å –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–ª–∏—Ü—ã',
    31: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–±–æ—Ä–¥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ —É–ª–∏—Ü–µ',
    32: '–†–∞–∑–º–µ—Ä—ã –±–∏–ª–±–æ—Ä–¥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —É–ª. —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π',
    33: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä —Å–≤—è–∑–∏ –Ω–∞ —É–ª–∏—Ü–µ',
    34: '–ê–¥—Ä–µ—Å–∞ –¥–æ–º–æ–≤, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–æ—Ä–∞ —Å–≤—è–∑–∏',
    35: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∫–∞—Ñ–æ–≤/–∫–æ—Ä–æ–±–æ–∫ —Å–≤—è–∑–∏',
    36: '–ê–¥—Ä–µ—Å–∞ –¥–æ–º–æ–≤, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π —à–∫–∞—Ñ/–∫–æ—Ä–æ–±–∫–∞ —Å–≤—è–∑–∏',
    37: '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ê–û"–ö–∞–∑–∞—Ö—Ç–µ–ª–µ–∫–æ–º"',
    38: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –®–ü–î',
    39: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã',
    40: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –®–ü–î –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
    41:"–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å (–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞)",
    42: '–ú–æ–±–∏–ª—å–Ω—ã–π –®–ü–î',
    43: '–ù–∞–ª–∏—á–∏–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∞–Ω—Ç–µ–Ω–Ω',
    44: "–ü–µ—Ä–µ—á–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π (—à–∫–æ–ª—ã, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ —Ç.–¥.)",
    45: "–£—Ä–æ–≤–µ–Ω—å –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö –ø–æ –¥–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ",
    46: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è —É–ª–∏—Ü'

}

st.header('–ê–Ω–∫–µ—Ç–∞')

def check_password():
    """Returns `True` if the user had the correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if st.session_state["password"] == st.secrets["password"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # don't store password
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        # First run, show input for password.
        st.text_input(
            "–ü–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        # Password not correct, show input + error.
        st.text_input(
            "–ü–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        st.error("üòï –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        return False
    else:
        # Password correct.
        return True

if check_password():

    # long_running_function()
    st.session_state.df = df

    st.date_input(
    q[0],
    datetime.date.today(),
    key='a0')

    st.date_input(
    q[1],
    datetime.date.today(),
    key='a1',
    disabled = True)

    st.text_input(
    q[2],
    "",
    key='a2')


    options_rdt = [
        '',
        '–í–æ—Å—Ç–æ—á–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ü–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
        '–ó–∞–ø–∞–¥–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ü–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
        '–†–î–¢ "–ê–ª–º–∞—Ç—ã—Ç–µ–ª–µ–∫–æ–º"',
        '–°–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ü–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
        '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ü–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π',
        '–Æ–∂–Ω–∞—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ü–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π'
    ]



    st.selectbox(
        q[3],
        options_rdt,
        key='a3')

    st.session_state.options_region = np.unique(
        st.session_state.df.loc[st.session_state.df['rdt'] == st.session_state.a3, 'region'].to_numpy())


    st.selectbox(
    q[4],
    st.session_state.options_region,
    key='a4')


    st.session_state.options_town = np.unique(
        st.session_state.df.loc[(st.session_state.df['rdt'] == st.session_state.a3 ) &
                                (st.session_state.df['region'] == st.session_state.a4 ), 'isb_town'].to_numpy())

    st.selectbox(
         q[5],
         st.session_state.options_town,
    key='a5'
    )

    st.session_state.options_gts_sts = [
        '–ì–¢–°',
        '–°–¢–°'
    ]

    st.selectbox(
         q[6],
         st.session_state.options_gts_sts,
         key='a6'
    )


    st.session_state.option_street_type = [
    '–ê–ª.',
    '–ë–ª–≤.',
    '–ñ–ö',
    '–ñ–ú',
    '–ñ–†',
    '–ö–≤.',
    '–ú–∫—Ä.',
    '–ù–∞–±.',
    '–ü–µ—Ä.',
    '–ü–ª.',
    '–ü—Ä–∑.',
    '–ü—Ä–æ.',
    '–ü—Ä—Å.',
    '–†–∑–¥.',
    '–¢—Ä.',
    '–£–ª.'
    ]

    st.selectbox(
     q[7],
     st.session_state.option_street_type,
     key='a7')

    st.session_state.options_street = np.unique(st.session_state.df.loc[(st.session_state.df['rdt'] == st.session_state.a3) &
                                                       (st.session_state.df['region'] == st.session_state.a4) &
                                                       (st.session_state.df['isb_town'] == st.session_state.a5),
                                                       'isb_street'].to_numpy())

    st.selectbox(
     q[8],
     st.session_state.options_street,
    key='a8')

    st.selectbox(
     q[9],
     st.session_state.options_street,
    key='a9')

    st.text_input(
     q[10],
     "",
    key='a10')

    st.selectbox(
     q[11],
     st.session_state.options_street,
    key='a11')

    st.text_input(
     q[12],
     "",
    key='a12')

    st.number_input(
     q[13],
    step=1,
    key='a13')

    st.text_input(
     q[14],
     "",
    key='a14')

    st.text_input(
     q[15],
     "",
    key='a15')


    st.multiselect(label=q[46],
    options= st.session_state.options_street,
    key = 'a46')



    st.number_input(
     q[16],
    step=1,
    key='a16')


    st.number_input(
     q[17],
    step=1,
    key='a17')


    st.number_input(
     q[18],
    step=1,
    key='a18')

    st.text_input(
     q[19],
     "",
    key='a19')

    st.number_input(
     q[20],
    step=1,
    key='a20')

    st.number_input(
     q[21],
    step=1,
    key='a21')

    st.number_input(
     q[22],
    step=1,
    key='a22')

    st.text_input(
     q[23],
     "",
    key='a23')

    st.number_input(
     q[24],
    step=1,
    key='a24')

    st.text_input(
     q[25],
     "",
    key='a25')

    st.number_input(
     q[26],
    step=1,
    key='a26')

    st.text_input(
     q[27],
     "",
    key='a27')


    st.number_input(
     q[28],
    step=1,
    key='a28')

    st.text_input(
     q[29],
     "",
    key='a29')

    st.text_input(
     q[30],
     "",
    key='a30')

    st.number_input(
     q[31],
    step=1,
    key='a31')

    st.text_input(
     q[32],
     "",
    key='a32')

    # 33: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–æ—Ä —Å–≤—è–∑–∏ –Ω–∞ —É–ª–∏—Ü–µ',
    st.number_input(
     q[33],
    step=1,
    key='a33')


    # 34: '–ê–¥—Ä–µ—Å–∞ –¥–æ–º–æ–≤, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–æ—Ä–∞ —Å–≤—è–∑–∏',
    st.text_input(
     q[34],
     "",
    key='a34')

    # 35: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∫–∞—Ñ–æ–≤/–∫–æ—Ä–æ–±–æ–∫ —Å–≤—è–∑–∏',
    st.number_input(
     q[35],
    step=1,
    key='a35')

    # 36: '–ê–¥—Ä–µ—Å–∞ –¥–æ–º–æ–≤, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π —à–∫–∞—Ñ/–∫–æ—Ä–æ–±–∫–∞ —Å–≤—è–∑–∏',
    st.text_input(
     q[36],
     "",
    key='a36')

    # 37: '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ê–û"–ö–∞–∑–∞—Ö—Ç–µ–ª–µ–∫–æ–º"',


    st.session_state.yes_no = [
    '–¥–∞',
    '–Ω–µ—Ç'
    ]

    st.selectbox(
     q[37],
     st.session_state.yes_no,
     key='a37')


    # 38: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –®–ü–î',

    st.session_state.internet_tech = [
    '',
    '–Ω–µ—Ç—É',
    'DSL',
    'FTTh',
    'FTTb',
    'WiMax'
    ]

    st.multiselect(q[38],
    options =st.session_state.internet_tech,
    key='a38')

    # 39: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã',

    st.session_state.oppositions = [
    '',
    '–Ω–µ—Ç—É',
    'Beeline',
    'AlmaTV',
    'TransTelecom'

    ]

    st.multiselect(q[39],
    options =st.session_state.oppositions,
    key='a39')


    # 40: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –®–ü–î –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
    st.multiselect(q[40],
    options =st.session_state.internet_tech,
    key='a40')

    # 41: "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–≤—è–∑—å (–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞)",

    st.session_state.mob_signal = [
    '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ',
    '–Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
    ]

    st.selectbox(q[41],
    st.session_state.mob_signal,
    key='a41')

    # 42: '–ú–æ–±–∏–ª—å–Ω—ã–π –®–ü–î',
    st.session_state.mob_network = [
    '',
    '2G',
    '3G',
    '4G'
    ]

    st.selectbox(q[42],
    st.session_state.mob_network,
    key='a42')

    # 43: '–ù–∞–ª–∏—á–∏–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –∞–Ω—Ç–µ–Ω–Ω',
    st.selectbox(q[43],
    st.session_state.yes_no,
    key='a43')

    # 44: "–ü–µ—Ä–µ—á–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π (—à–∫–æ–ª—ã, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ —Ç.–¥.)",

    st.text_input(
     q[44],
     "",
    key='a44')

    # 45: "–£—Ä–æ–≤–µ–Ω—å –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö –ø–æ –¥–∞–Ω–Ω–æ–π —É–ª–∏—Ü–µ"

    st.text_input(
     q[45],
     "",
    key='a45')






    if st.button(label='–æ—Ç–ø—Ä–∞–≤–∏—Ç—å') :

        st.session_state.all_input_filled = True
        for i in range(len(q)):
            key = 'a' + str(i)
            if not isinstance(st.session_state[key],int) and not isinstance(st.session_state[key], datetime.date):
                if len(st.session_state[key]) == 0:
                    st.session_state.all_input_filled = False

        if st.session_state.all_input_filled:
            st.session_state.wks = st.session_state.sh.worksheet('result')
            st.session_state.values_list = list()
            for i in range(len(q)):
                key ='a'+str(i)
                if isinstance(st.session_state[key], datetime.date):
                    st.session_state.values_list.append(st.session_state[key].strftime("%d/%m/%Y"))
                elif isinstance(st.session_state[key],list):
                    st.session_state.values_list.append(', '.join(map(str, st.session_state[key])))
                else:
                    st.session_state.values_list.append(st.session_state[key])

            st.session_state.wks.append_row( st.session_state.values_list)
            for key in st.session_state.keys():
                del st.session_state[key]

            st.success('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            st.experimental_rerun()
        else:

            st.warning('–ø–æ–ª–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ')
